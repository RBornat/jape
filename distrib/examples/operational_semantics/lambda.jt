/*
        $Id$
        FONT{kontt-14}

This theory was derived automatically from the latex source text
of part of the paper ``Animating Operational Semantics
with Jape'' by Bernard Sufrin and Richard Bornat (April 1998). A
discursive account of the theory is given in that paper.

*/
        CLASS   VARIABLE a b c d e f g h i j k l m n o p q r s t u v w x y z
        CLASS   FORMULA  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
        CLASS   NUMBER   num
        LEFTFIX 20 λ •
        INFIX   1T → →*
        INFIX   100T =
        INFIX   200T +
        PREFIX  1000 ~
        LEFTFIX 10   let in
        BIND x SCOPE T IN λ x • T
        BIND x SCOPE T IN let x=S in T
        SEQUENT IS LIST ⊢ FORMULA
        SUBSTFIX 500000 [ S / s ]
    MENU "Lambda Rules"
        RULE  Beta    ⊢ (λ x • S) T  →  S[T/x]
        RULE  Let     ⊢ let x=T in S →  (λ x • S)(T)
        ENTRY Addition IS Add
        SEPARATOR
        RULE  Rator  FROM  ⊢ S→S'  INFER ⊢ S T →  S' T
        RULE  Rand   FROM  ⊢ T→T'  INFER ⊢ S T →  S  T'
        RULE  AddL   FROM ⊢ E1→E1' INFER ⊢ E1+E2 → E1'+E2
        RULE  AddR   FROM ⊢ E2→E2' INFER ⊢ E1+E2 → E1+E2'
        SEPARATOR
        RULE Transitive  FROM  ⊢ A→*B AND ⊢ B→*C INFER ⊢ A→*C
        RULE Step        FROM  ⊢ A→B INFER ⊢ A→*B
        RULE Identity    INFER ⊢ A→*A
    END
    TACTIC Add()    IS (LAYOUT "Add" () Addition (LAYOUT "" () EVALUATE))
    RULE   Addition IS FROM  ⊢ "ADD"(T1, T2, T3, (~)) INFER  ⊢ T1+T2→T3
       CONJECTUREPANEL "Structural Semantics"
        THEOREMS AdHoc
        ARE ⊢ let f = (λ x • x) in f f 1 →* _T
        AND ⊢ (1+2)+(3+1)→*_T
        AND ⊢ (1+2)+(~4)→*_T
        AND ⊢ let x = 1+2 in x+x →*_T
        AND ⊢ let c = (λ f • λ g • λ a • f(g a)) in
              let f = (λ a • a) in c f f →* _T
        AND ⊢ let g = (λ f • f f) in g g →* _T
        AND ⊢ let g = (λ f • f f) in
              let k = (λ a • λ b • a) in k 2 (g g) →* _T
        END
    END
     MENU Edit
        RADIOBUTTON displaystyle
             "Sequent-Tree display style"  IS tree
        AND  "Box display style"           IS box
        INITIALLY tree
        END
        CHECKBOX  autoselect "Select goal automatically"  INITIALLY true
        CHECKBOX  showallprovisos "Show all provisos" INITIALLY true
     END
    TACTIC TransitiveStep(rule)
    (WHEN (LETGOAL (_E →* _T) Transitive (LAYOUT "%h" () Step rule))
          (LETGOAL (_E →  _T) rule))
    TACTIC Finished()
    (WHEN (LETGOAL (_num        →* _T) Identity)
          (LETGOAL (~ _num      →* _T) Identity)
          (LETGOAL ((λ _x • _E) →* _T) Identity))
    CONJECTUREPANEL "Structural Semantics"
         BUTTON Beta      IS apply TransitiveStep Beta
         BUTTON Let       IS apply TransitiveStep Let
         BUTTON Rator     IS apply TransitiveStep Rator
         BUTTON Rand      IS apply TransitiveStep Rand
         BUTTON AddL      IS apply TransitiveStep AddL
         BUTTON AddR      IS apply TransitiveStep AddR
         BUTTON Addition  IS apply TransitiveStep Add
         BUTTON Finished  IS apply Finished
    END
    TRANSITIVE RULE "Transitive"
    REFLEXIVE  RULE "Identity"
    MENU Edit
    SEPARATOR
      CHECKBOX   hidetransitivity "Transitive Rule Display" INITIALLY false
      CHECKBOX   hidereflexivity  "Hide Identity Steps"     INITIALLY false
       RADIOBUTTON oneSmallStep  "Small Step Normal Order"      IS NormalStep
       AND                       "Small Step Applicative Order" IS ApplicativeStep
       END
       RADIOBUTTON oneBigStep "Big Step Normal Order"      IS BigNormalStep
       AND                    "Big Step Applicative Order" IS BigApplicativeStep
       END
    END
    TACTIC NormalStep()
    (ALT Beta Add Let
         (WHEN (LETGOAL (_num1 + _E  → _T) AddR)
               (LETGOAL (_E1   + _E2 → _T) AddL)
               (LETGOAL (_F _A → _T) Rator)))
    TACTIC ApplicativeStep()
    (ALT Add Let
         (WHEN (LETGOAL ((λ _x•_E) _A → _T) (WhenNormal _A Beta Rand))
               (LETGOAL (_num _A        → _T) FAIL)
               (LETGOAL (_num1 + _E     → _T) AddR)
               (LETGOAL (_E1   + _E2    → _T) AddL)
               (LETGOAL (_F _A          → _T) Rator)))

    TACTIC WhenNormal(expr, tactic, othertactic)
    (WHEN  (LETUNIFY (λ _x•_S) expr tactic)
           (LETUNIFY _num        expr tactic)
           (LETUNIFY (~ _num)    expr tactic)
           (LETUNIFY _x          expr tactic)
           othertactic)
    TACTIC RepeatStep(tactic)
    (WHEN (LETGOAL (_num        →* _T) Identity)
          (LETGOAL (~ _num      →* _T) Identity)
          (LETGOAL ((λ _x•_E)   →* _T) Identity)
          (SEQ (TransitiveStep tactic) (RepeatStep tactic)))

    TACTIC SingleStep(tactic)
    (WHEN (LETGOAL (_num        →* _T) Identity)
          (LETGOAL (~ _num      →* _T) Identity)
          (LETGOAL ((λ _x•_E)   →* _T) Identity)
          (TransitiveStep tactic))

    CONJECTUREPANEL "Structural Semantics"
       BUTTON Step    IS apply SingleStep oneSmallStep
       BUTTON "Step*" IS apply RepeatStep oneSmallStep
    END
    
   RULES Apply ARE
     INFER (λ x • E') E → E'[E/x]
   AND
     FROM  F → F'
     INFER F E → F' E
   END
   RULES Arith ARE
     FROM   "ADD"(num1, num2, K, (~))
     INFER  num1 + num2 → K
   AND
     FROM   E2 → E2'
     INFER  num + E2 → num + E2'
   AND
     FROM   E1 → E1'
     INFER  E1 + E2 → E1' + E2
   END
   TACTIC Arithmetic() IS (SEQ Arith (IF (LAYOUT "Arithmetic" () EVALUATE)))
   TACTIC NormalStep() IS (ALT Let Apply Arithmetic)
   MENU "Normal Order Rules"
      BUTTON Apply    IS apply TransitiveStep Apply
      BUTTON Arith    IS apply TransitiveStep Arithmetic
      BUTTON Let      IS apply TransitiveStep Let
      BUTTON Finished IS apply Finished
      BUTTON Step     IS apply SingleStep NormalStep
   END
    INFIX 1T ⇒

    MENU "Natural Semantic Rules"
     RULE  "Rator⇒"   IS FROM ⊢ S⇒S'  AND ⊢ S' T  ⇒ U INFER ⊢ S T ⇒ U
     RULE  "Rand⇒"    IS FROM ⊢ T⇒T'  AND ⊢ S  T' ⇒ U INFER ⊢ S T ⇒ U
     RULE  "Beta⇒"    IS FROM  ⊢ S[T/x]         ⇒ U INFER ⊢ (λ x •S) T  ⇒ U
     RULE  "Let⇒"     IS FROM  ⊢ (λ x •T)(S)   ⇒ U INFER ⊢ let x=S in T ⇒ U
     RULE  "Add⇒"     IS FROM  ⊢ S⇒N1 AND T⇒N2 AND N1+N2→N INFER S+T⇒N
     ENTRY "Addition" IS Add
     RULES NormalForm
     ARE   ⊢ λ x • S ⇒ λ x • S
     AND   ⊢ num     ⇒ num
     AND   ⊢ ~num    ⇒ ~num
     END
    END
    TACTIC BigNormalStep() IS
    (ALT NormalForm
       (WHEN
          (LETGOAL ((λ _x • _S) _T   ⇒  _U) "Beta⇒")
          (LETGOAL (let _x = _S in _T ⇒  _U) "Let⇒")
          (LETGOAL (_S _T             ⇒  _U) "Rator⇒")
          (LETGOAL (_S + _T           →  _U) Add)
          (LETGOAL (_S + _T           ⇒  _U) "Add⇒")))

    TACTIC BigApplicativeStep() IS
    (ALT NormalForm
      (WHEN
          (LETGOAL ((λ _x • _S) _T    ⇒  _U) (WhenNormal _T "Beta⇒"  "Rand⇒"))
          (LETGOAL (_S _T             ⇒  _U) (WhenNormal _T "Rator⇒" "Rand⇒"))
          (LETGOAL (let _x = _S in _T ⇒  _U) "Let⇒")
          (LETGOAL (_S + _T           →  _U) Add)
          (LETGOAL (_S + _T           ⇒  _U) "Add⇒")))

   CONJECTUREPANEL "Natural Semantics"
    BUTTON Step IS apply oneBigStep
    

    THEOREMS BigStepThms
    ARE ⊢ let f = (λ x • x) in f f 1⇒ _T
    AND ⊢ (1+2)+(3+1)⇒_T
    AND ⊢ (1+2)+(~4)⇒_T
    AND ⊢ let x = 1+2 in x+x ⇒_T
    AND ⊢ let c = (λ f • λ g • λ a • f(g a)) in
          let f = (λ a • a) in c f f ⇒ _T
    AND ⊢ let g = (λ f • f f) in g g ⇒ _T
    AND ⊢ let g = (λ f • f f) in
          let k = (λ a • λ b • a) in k 2 (g g) ⇒ _T
    END
    END
    
    MENU "Deterministic Rules"
     RULE   "App∆"   IS FROM ⊢ F ⇒ (λ x •S) AND ⊢ S[A/x] ⇒ U INFER ⊢ F A ⇒ U
     RULE   "Let∆"   IS FROM ⊢ S[A/x] ⇒ U INFER ⊢ let x=A in S ⇒ U
     TACTIC "Add∆"   IS "Add⇒"
     ENTRY  Addition  IS Add
     ENTRY  NormalForm
    END
    TACTIC BigDeterministicStep() IS
    (ALT NormalForm "App∆" "Let∆" Add "Add∆")

   CONJECTUREPANEL "Natural Semantics"
      BUTTON "∆Step" IS apply BigDeterministicStep
    END
     USE "mapping.j"
     INITIALISE outerassumptionword "Environment"
     INITIALISE innerassumptionword "Environment"
     OUTFIX ⟦ ⟧

     MENU "Value Rules"
       RULES Constant
       ARE   Env ⊢ num   ⇒ num
       AND   Env ⊢ ~num  ⇒ ~num
       AND   Env ⊢ λ x•S ⇒ ⟦λ x • S, Env⟧
       END
       RULE  Sum
       FROM  Env ⊢ S ⇒ N1
       AND   Env ⊢ T ⇒ N2
       AND       ⊢ N1+N2 → V
       INFER Env ⊢ S+T⇒V
       RULE  Variable
       FROM      ⊢ Env x = V
       INFER Env ⊢ x ⇒ V
       RULE  Application
       FROM            Env ⊢ F ⇒ ⟦λ x • E, Env'⟧
       AND             Env ⊢ A ⇒ V
       AND  Env' ⊕ (x==V) ⊢ E ⇒ V'
       INFER           Env ⊢ F A ⇒ V'

       RULE  Block
       FROM            Env ⊢ A ⇒ V
       AND   Env ⊕ (x==V) ⊢ E ⇒ V'
       INFER           Env ⊢ let x=A in E ⇒ V'
       RULE   TopLevel
       FROM   ▪ ⊢ E ⇒ V
       INFER     ⊢ E ⇒ V

       SEPARATOR
       TACTIC EvalStep IS
       (ALT Constant
            (LAYOUT "Variable" () Variable Lookup)
            Sum
            Application
            Block
            Add
            TopLevel)

       ENTRY Evaluate IS (DO (EvalStep))
     END


