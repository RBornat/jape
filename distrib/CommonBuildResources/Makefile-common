
GUIDIR=../../java_GUI
ENCODEDIR=../../utf8_encoder
ENGINEDIR=../../camlengine
BUILDDIR=../../_buildengine$(OS)
BUILDRESOURCES=../../CommonBuildResources

%.html: %.md; pandoc $< -o $@

##################################################################
#
#       Default (Unix) targets; Windows build overrides these
#
#       ENGINETARGET   -- what the architecture-specific make should try to build
#
ENGINETARGET=jape_engine
#
##################################################################

all: distribution

#
#       Multiarchitecture/OS engine build is safest if compilations are in separate directories
#
#       1. Different ocaml versions can be used
#       2. Simultaneous compilations are possible
#
#       Technique: synchronize source files in the compile directory, then compile
#       
#
engine:         ; cd $(ENGINEDIR); make $(ENGINETARGET) OS=$(OS)
engineclean:    ; cd $(ENGINEDIR); make clean OS=$(OS)

#
#       Java is compile-once, run anywhere, so we can make the GUI in one place
#
GUIclean:       ; (cd $(GUIDIR); ant -Dtarget="standard" -Dos="$(OS)" clean)
GUI:            ; export JAPEVERSION=`$(BUILDRESOURCES)/version.sh`; \
                  (cd $(GUIDIR); ant -Dguiversion='"'$$JAPEVERSION'"' -Dtarget="standard" uk.org.jape.jar)

jre:            ; cd $(GUIDIR); ant -Dtarget="standard" -Dos="$(OS)" jre

app: engine GUI jre; \
                  rm -fr Jape.app; mkdir Jape.app; \
                  cp -pR $(GUIDIR)/build/jre/$(OS)/jre Jape.app; \
                  cp -pR ../../iconset Jape.app; \
                  cp -pR $(GUIDIR)/Pics Jape.app; \
                  cp -p $(BUILDDIR)/main.native Jape.app; \
                  mv Jape.app/main.native Jape.app/$(ENGINETARGET); \
                  cp $(APPEXTRAS) Jape.app

#
#       
#
components::    engine GUI jre app

htmlclean::     ; rm -fr *.html

clean::          engineclean GUIclean htmlclean

distribution::  ; make components



